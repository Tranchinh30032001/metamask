import {
  Box,
  Flex,
  Spacer,
  Spinner,
  Text,
  useDisclosure,
  useMediaQuery,
} from "@chakra-ui/react";
import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";
import { memo, useEffect, useState } from "react";
import { IoMdAdd } from "react-icons/io";
import AppButton from "../components/AppButton";
import { hooks, metaMask } from "../core/connectors/metaMask";
import { useAuth } from "../core/hooks/useAuth";
import { useHydrated } from "../core/hooks/useHydrated";
import { ConnectModal } from "./components/ConnectModal";
import { DisconnectModal } from "./components/DisconnectModal";
import * as fcl from "@onflow/fcl";

fcl
  .config()
  .put("accessNode.api", "https://rest-testnet.onflow.org")
  .put("discovery.wallet", "https://fcl-discovery.onflow.org/testnet/authn");

export const LOCALSTORAGE_AUTOCONNECT = "autoconnect";

const { useChainId, useAccounts, useIsActivating, useProvider } = hooks;

export const handleConnectWallet = async () => {
  try {
    localStorage.setItem(LOCALSTORAGE_AUTOCONNECT, "true");
    await metaMask.activate();
  } catch (error) {}
};

const DefaultLayout = ({ children }: { children: React.ReactElement }) => {
  const accounts = useAccounts();
  const isActivating = useIsActivating();
  const isHydrated = useHydrated();
  const router = useRouter();
  const { isOpen, onClose, onOpen } = useDisclosure();
  const connectWalletState = useDisclosure();
  const { isLoggedIn } = useAuth();
  const [userFlow, setUserFlow] = useState();

  ///  Check if user has connected wallet before
  ///  If so, connect automatically, else show connect wallet modal
  useEffect(() => {
    const autoConnectRaw = localStorage.getItem(LOCALSTORAGE_AUTOCONNECT);

    if (!autoConnectRaw) {
      return;
    }

    const autoConnect = !(autoConnectRaw === "false");

    if (autoConnect) {
      handleConnectWallet();
    } else {
      connectWalletState.onOpen();
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  const links = [
    { label: "Home", href: "/" },
    { label: "Explore", href: "/explore" },
    { label: "Community", href: "/community" },
  ];
  const renderLinks = (link: { label: string; href: string }) => {
    // check for home page
    const isHomePage = router.pathname === "/" && link.href === "/";
    const isCurrentPage =
      (router.pathname.startsWith(link.href) && link.href !== "/") ||
      isHomePage;

    return (
      <Link key={link.href} href={link.href} style={{ position: "relative" }}>
        <Box
          padding="2"
          rounded="xl"
          paddingX={4}
          textColor="black"
          borderStyle="inset"
          background={isCurrentPage ? "black" : "white"}
          color={isCurrentPage ? "white" : "black"}
          borderWidth="2px"
          borderColor="transparent"
          transition="all 0.15s ease-in-out"
          _hover={{
            borderColor: "black",
            borderWidth: "2px",
            textColor: isCurrentPage ? "white" : "black",
          }}
          zIndex={2}
          position="relative"
        >
          {link.label}
        </Box>
      </Link>
    );
  };
  const [isSmallerThan750] = useMediaQuery("(max-width: 750px)");
  const formatAddress = (address: string) => {
    return `${address.slice(0, 8)}...${address.slice(-8)}`;
  };
  const openDisconnectModal = () => {
    onOpen();
  };
  const handleLoginFlow = () => {
    fcl.authenticate();
  };
  useEffect(() => {
    fcl.currentUser.subscribe(setUserFlow);
  }, []);
  return isHydrated ? (
    <Flex direction="column" height="calc(100vh)">
      <Head>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Box
        as="header"
        position="sticky"
        px={6}
        pb={2}
        top={0}
        zIndex={10}
        bgColor="white"
        borderBottomColor="black"
        borderBottomWidth={2}
      >
        <Spacer p={2} />

        <Flex justifyContent="space-between" alignItems="center">
          <Flex gap={6} alignItems="center">
            <Link href="/">
              <Text
                fontSize={isSmallerThan750 ? "xl" : "2xl"}
                fontWeight="bold"
              >
                Canto.Quest
              </Text>
            </Link>

            <Flex hidden={isSmallerThan750} gap={3}>
              {links.map(renderLinks)}
            </Flex>
          </Flex>

          <Flex gap={2} hidden={isSmallerThan750}>
            {isLoggedIn && (
              <Link href="/quest/create">
                <AppButton leftIcon={<IoMdAdd />}>Create quest</AppButton>
              </Link>
            )}

            <AppButton
              size={isSmallerThan750 ? "sm" : "md"}
              background="black"
              onClick={handleLoginFlow}
              color="white"
              _hover={{
                bgColor: "gray.600",
              }}
              leftIcon={isActivating ? <Spinner size="sm" ml={2} /> : undefined}
            >
              <p>
                {
                  //@ts-ignore
                  userFlow.addr ? userFlow.addr : "Login"
                }
              </p>
            </AppButton>
          </Flex>
        </Flex>
      </Box>

      <Box maxW="full" overflow="auto" flexGrow={1}>
        <Box as="main" minHeight="calc(100vh)" pb={isSmallerThan750 ? 20 : 0}>
          {children}
        </Box>

        <Flex
          position="fixed"
          bottom={4}
          insetX={4}
          zIndex={1}
          hidden={!isSmallerThan750}
        >
          {links.map(renderLinks)}
        </Flex>
      </Box>

      <DisconnectModal isOpen={isOpen} onClose={onClose} />
      <ConnectModal
        isOpen={connectWalletState.isOpen}
        onClose={connectWalletState.onClose}
      />
    </Flex>
  ) : (
    <>
      <Spinner />
    </>
  );
};

export interface Props {
  isOpen: boolean;
  onClose: () => void;
}

export default memo(DefaultLayout);
